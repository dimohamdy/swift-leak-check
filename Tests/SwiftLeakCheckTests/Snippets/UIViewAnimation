class X {
  private func main() {
    animateSmth {
      self.doSmth()
    }
    
    UIView.animate(withDuration: voiceDuration) {
      self.doSmth()
    }

    UIView.animate(withDuration: 0.3, animations: {
      self.doSmth()
    }) { _ in
      self.doSmth()
    }

    UIView.animate(withDuration: 0.3, animations: {
      self.doSmth()
    }, completion: { _ in
      self.doSmth()
    })
    
    UIView.animate(withDuration: Double(duration), delay: 0, options: .curveEaseInOut, animations: {
      self.doSmth()
    })

    UIView.animate(withDuration: Double(duration), delay: 0, options: .curveEaseInOut, animations: {
      self.doSmth()
    }) { _ in
      self.doSmth()
    }

    UIView.animate(withDuration: Double(duration), delay: 0, options: .curveEaseInOut, animations: {
      self.doSmth()
    }, completion: { _ in
      self.doSmth()
    })

    UIView.transition(from: view1, to: view2, duration: 1.0, options: []) { _ in
      self.doSmth()
    }

    animateIfNeeded(animated: animated, updateBlock: {
      self.doSmth()
    })
    
    stopActionAnimation {
      UIView.animate(withDuration: 0.2, delay: 0, options: [.transitionCrossDissolve, .beginFromCurrentState], animations: {
        self.doSmth()
      }) { (_) in
        self.doSmth()
      }
    }
  }
  
  private func animateSmth(_ completion: @escaping () -> Void) {
    UIView.animate(withDuration: 0.5,
                   delay: 0,
                   usingSpringWithDamping: 0.7,
                   initialSpringVelocity: 0.5,
                   options: [.curveEaseInOut],
                   animations: { self.doSmth() },
                   completion: { _ in completion() })
  }

  private func stopActionAnimation(_ completion: (() -> Void)? = nil) {
    dismissActionAnimation(completion)
  }
  
  private func dismissActionAnimation(_ completion: (() -> Void)? = nil) {
    UIView.animate(withDuration: actionAnimationOut / 2, delay: actionDelayOut, options: .beginFromCurrentState, animations: {
      self.doSmth()
    }) { (_) in
      self.doSmth()
      completion?()
    }
  }
  
  private func doSmth() {}
}

extension X {
  private func animateIfNeeded(animated: Bool, updateBlock: @escaping () -> Void) {
    if animated {
      UIView.transition(with: view1, duration: 1.0, options: []) {
        updateBlock()
        self.doSmth()
      }
    } else {
      updateBlock()
    }
  }
}
