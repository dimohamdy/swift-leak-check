class AClass {
  var x = 1
  
  func main() {
    let block = { [weak self] in
      guard let strongSelf = self else { return }
      strongSelf.x = strongSelf.x + 1
      weak var strongSelf2 = strongSelf
      someObject.doSmth {
        guard let `self` = self else { return }
        self.x = 1
        guard let strongSelf2 = strongSelf2 else { return }
        strongSelf2.x = 1
        let strongSelf3 = strongSelf // Leak
        strongSelf3.x = 1
        strongSelf.x = 1// Leak
        let _ = strongSelf // Leak
      }
    }

    // So this `block` will be evaluated as escaping
    someObject.doSmth(block)

    doSmth(tuple: (
        value: 1,
        closure: {
          self.x // Leak
        }
      ),
      output: self
    )

    doSmth { [unowned self] in
      self.x
    }
  }
}
